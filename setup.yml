- name: "Setup wordpress"
  hosts: "{{ server | default('personal') }}"
  remote_user: "{{ default_user }}"

  handlers:
    - name: Restart nginx
      ansible.builtin.service:
        name: nginx
        state: restarted
      become: "{{ requires_become }}"

  tasks:
    # Abstracting out versions for updating this later.
    # default_user is not a documented variable. But you could use this to change the name of the deployer user.
    - name: Set versions and other defaults
      ansible.builtin.set_fact:
        requires_become: "{{ (default_user == 'root') | ternary('no', 'yes') }}"
        deploy_user: "{{ deploy_user | default('deployer') }}"
        php_version: "{{ php_version | default('7.4') }}"
        mariadb_version: "10.8.2"
        wordpress_deploy_path: "/home/{{ deploy_user | default('deployer') }}/wordpress-deploy"
        site_path: "/home/{{ deploy_user | default('deployer') }}/sites/{{ site_name }}"
        site_config_path: "/home/{{ deploy_user | default('deployer') }}/sites/{{ site_name }}/config"
        site_content_path: "/home/{{ deploy_user | default('deployer') }}/sites/{{ site_name }}/content"
      tags: ['tryout', 'tryout2', 'plugin_install']

    - include_tasks:
        file: "tasks/server-base.yml"
        apply:
          become: "{{ requires_become }}"

    - name: Create common config dir
      file:
        path: "{{ wordpress_deploy_path }}"
        state: directory
        recurse: yes
      become: "{{ requires_become }}"
      become_user: "{{ deploy_user }}"

    - name: Create site content dir
      file:
        path: "{{ site_content_path }}"
        state: directory
        recurse: yes
        owner: "{{ deploy_user }}"
      become: "{{ requires_become }}"
      become_user: "{{ deploy_user }}"

    - name: Create site config dir
      file:
        path: "{{ site_config_path }}"
        state: directory
        recurse: yes
        owner: "{{ deploy_user }}"
      become: "{{ requires_become }}"
      become_user: "{{ deploy_user }}"

    - name: Create database password
      shell: "openssl rand -hex 6 > {{site_config_path}}/db-password"
      args:
        creates: "{{site_config_path}}/db-password"
      become: "{{ requires_become }}"
      become_user: "{{ deploy_user }}"

    - name: Read database password
      shell: "cat {{site_config_path}}/db-password"
      register: db_password_task
      become: "{{ requires_become }}"

    - name: Create database if does not exist
      shell: "mysql -e \"CREATE DATABASE IF NOT EXISTS {{ site_name }};\""
      become: "{{ requires_become }}"

    - name: Create database user if does not exist
      shell: "mysql -e \"CREATE USER IF NOT EXISTS '{{ site_name }}'@'localhost' IDENTIFIED BY '{{ db_password_task.stdout }}';\""
      become_user: "{{ deploy_user }}"
      become: "{{ requires_become }}"

    - name: Ensure database user has the right privileges to the site database
      shell: "mysql -e \"GRANT ALL PRIVILEGES ON {{ site_name }}.* TO '{{ site_name }}'@'localhost';\""
      become_user: "{{ deploy_user }}"
      become: "{{ requires_become }}"

    - name: Download wordpress
      shell: "wp core download --locale=en_US --version={{ wordpress_version | default('latest') }}"
      args:
        chdir: "{{ site_content_path }}"
        creates: "{{ site_content_path }}/wp-login.php"
      become_user: "{{ deploy_user }}"

    # wp config create --dbname=mysite --dbuser=mysite --dbpass=`cat ../config/db-password` --locale=en_US
    - name: Create wp-config.php
      shell: "wp config create --dbname={{ site_name }} --dbuser={{ site_name }} --dbpass={{ db_password_task.stdout }} --locale=en_US"
      args:
        chdir: "{{ site_content_path }}"
        creates: "{{ site_content_path }}/wp-config.php"
      become_user: "{{ deploy_user }}"

    - name: Check if wordpress is already installed for site
      shell: "wp core is-installed || echo not_installed"
      args:
        chdir: "{{ site_content_path }}"
      ignore_errors: True
      register: wp_install_check
      changed_when: "'not_installed' in wp_install_check.stdout"
      become_user: "{{ deploy_user }}"

    - name: Generate default password for site
      shell: "openssl rand -hex 4 > {{site_config_path}}/default-password"
      args:
        creates: "{{site_config_path}}/default-password"
      when: "'not_installed' in wp_install_check.stdout"
      become_user: "{{ deploy_user }}"

    # wp core install --url=example.com --title="Hello World" --admin_user=admin --admin_password="TODO" --admin_email=anything@example.com --skip-email
    - name: Install the site
      shell: "wp core install --url={{ domain }} --title=\"{{ site_title }}\" --admin_user={{ wordpress_admin_user | default('admin') }} --admin_password=\"`cat {{site_config_path}}/default-password`\" --admin_email={{wordpress_admin_email}} --skip-email"
      args:
        chdir: "{{ site_content_path }}"
      when: "'not_installed' in wp_install_check.stdout"
      become_user: "{{ deploy_user }}"

    - name: Install akismet plugin
      include_tasks: "tasks/install-plugin.yml"
      vars:
        plugin_name: "akismet"
      tags: ["plugin_install"]

    - name: Install wp-super-cache plugin
      include_tasks: "tasks/install-plugin.yml"
      vars:
        plugin_name: "wp-super-cache"
      tags: ["plugin_install"]

    - name: "Add nginx config for site"
      ansible.builtin.template:
        src: "templates/site.nginx-conf.j2"
        dest: "/etc/nginx/sites-enabled/{{ site_name }}"
      become: "{{ requires_become }}"
      notify:
        - Restart nginx

    - name: Ensure nginx is running
      ansible.builtin.service:
        name: nginx
        state: started
      become: "{{ requires_become }}"

    # # TODO document wordpress_admin_user
    # # TODO document wordpress_admin_email
    # # TODO notify_email should default to wordpress_admin_email
    # # TODO server notifications should be disabled only if notify_email is set to off
    # # TODO what about wordpress multi-site?

    # - name: Setup cron job for backups
    #   todo:

    # - name: Setup monit
    #   todo:

    # - name: Add mariadb config for monit
    #   todo:

    # - name: Add php-fpm config for monit
    #   todo:

    # - name: Add nginx config for monit
    #   todo:

    # - name: Disable systemd services
    #   todo:
    #   loop:
    #     - "nginx"
    #     - "php{{php_version}}-fpm"
    #     - "mariadb-server"

    # - name: Add site backup script
    #   todo:

    # - name: Add wordpress update notification script
    #   todo:

    # - name: Send post-install notification email
    #   todo:
